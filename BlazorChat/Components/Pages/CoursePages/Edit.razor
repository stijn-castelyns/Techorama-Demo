@page "/admin/Courses/edit"
@inject BlazorChat.Infra.CourseDbContext DB
@using BlazorChat.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Course</h4>
<hr />
@if (Course is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Course" OnValidSubmit="UpdateCourse" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Course.CourseTitleSlug" value="@Course.CourseTitleSlug" />
                <div class="mb-3">
                    <label for="coursetitle" class="form-label">CourseTitle:</label>
                    <InputText id="coursetitle" @bind-Value="Course.CourseTitle" class="form-control" />
                    <ValidationMessage For="() => Course.CourseTitle" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="numberofdays" class="form-label">NumberOfDays:</label>
                    <InputNumber id="numberofdays" @bind-Value="Course.NumberOfDays" class="form-control" />
                    <ValidationMessage For="() => Course.NumberOfDays" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="htmlfilename" class="block text-gray-700 text-sm font-bold mb-2">HtmlFileName:</label>
                    <InputText id="htmlfilename" @bind-Value="Course.HtmlFileName" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline" />
                    <ValidationMessage For="() => Course.HtmlFileName" class="text-red-600" />
                </div>
                <div class="mb-3">
                    <label for="learninggoals" class="form-label">LearningGoals:</label>
                    <InputText id="learninggoals" @bind-Value="Course.LearningGoals" class="form-control" />
                    <ValidationMessage For="() => Course.LearningGoals" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="targetaudience" class="form-label">TargetAudience:</label>
                    <InputText id="targetaudience" @bind-Value="Course.TargetAudience" class="form-control" />
                    <ValidationMessage For="() => Course.TargetAudience" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/admin/courses">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public string CourseTitleSlug { get; set; }

    [SupplyParameterFromForm]
    public Course? Course { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Course ??= await DB.Courses.FirstOrDefaultAsync(m => m.CourseTitleSlug == CourseTitleSlug);

        if (Course is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateCourse()
    {
        DB.Attach(Course!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CourseExists(Course!.CourseTitleSlug))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/courses");
    }

    bool CourseExists(string coursetitleslug)
    {
        return DB.Courses.Any(e => e.CourseTitleSlug == coursetitleslug);
    }
}
